// import Head from 'next/head';
// import Image from 'next/image';
// import styles from '../styles/Home.module.css';
// import hello from './api/hello';
// import { GetStaticProps, GetStaticPropsContext } from 'next';
// // import fs from 'fs';
// // import path from 'path';
// import { useState, useEffect, useRef, useCallback } from 'react';
// import axios from 'axios';
// import { axiosGetCancellable } from '../testAxios';

// function Movies() {
//   const [searchTerm, setSearchTerm] = useState('');
//   const [searchedMoviesData, setSearchedMoviesData] = useState({});
// const inputRef = useRef<HTMLInputElement>(null);

// **** Primer ispod radi, ali je dobar da se koristi ukoliko fetchujemo na klik, ne i ako fetch ide svaki put kad otkucamo karakter **** ///

// const fetchData = useCallback(async () => {
//   if (searchTerm) {
//     const res = await fetch(`/api/hello?q=${searchTerm}`);
//     const data = await res.json();
//     console.log(searchTerm);
//     if (data) {
//       setSearchedMoviesData(data);
//     } else {
//       console.log('no data in searchedMoviesData');
//     }
//   }
// }, [searchTerm]);

// useEffect(() => {
//   fetchData();
// }, [fetchData]);

// useEffect(() => {
//   const source = axios.CancelToken.source();

//   const fetchData = async () => {
//     try {
//       if (searchTerm.length > 0) {
//         const response = await axios.get(`/api/hello?q=${searchTerm}`, {
//           cancelToken: source.token,
//         });

//         setSearchedMoviesData(response);
//         console.log(response);
//       }
//     } catch (error) {
//       if (axios.isCancel(error)) {
//       } else {
//         throw error;
//       }
//     }
//   };

//   fetchData();

//   return () => {
//     source.cancel();
//   };
// }, [searchTerm]);

// const handleClick = async (e) => {
//   e.preventDefault();
// };

// sending Post request good example

// const res = await fetch('/api/hello', {
//   method: 'GET',
//   headers: {
//     'Content-type': 'application/json',
//   },
// transforming data that user entered to JSON string - to be readable for the server
// by sending this kind of a request, our request.body property includes searched term - req.body.term
//   body: JSON.stringify({ term: searchTerm }),
// });

//   return (
//     <div className={styles.container}>
//       <Head>
//         <title>Create Next App</title>
//         <meta name="description" content="Generated by create next app" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//       <main className={styles.main}>
//         {searchedMoviesData.data.results ? (
//           searchedMoviesData.data.results.map((movie) => {
//             return <span key={movie.id}>{movie.title}</span>;
//           })
//         ) : (
//           <p>Loading</p>
//         )}
//         <label htmlFor="search-movie">Search</label>
//         <input
//           type="text"
//           id="search-movie"
//           value={searchTerm}
//           onChange={(e) => setSearchTerm(e.target.value)}
//         ></input>
//         {/* <button type="button" onClick={(e) => handleClick(e)}> */}
//         {/* Click
//         </button> */}
//       </main>
//     </div>
//   );
// }

// export const getStaticProps: GetStaticProps = async (
//   context: GetStaticPropsContext
// ) => {
//   // const urlPath = path.join(process.cwd(), 'api', 'hello');

//   const response = await fetch(`http://localhost:3000/api/hello`);
//   const data = await response.json();

//   return {
//     props: {
//       data,
//     },
//   };
// };

// export default Movies;
